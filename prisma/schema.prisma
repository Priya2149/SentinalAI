generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  directUrl         = env("DIRECT_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id        String      @id @default(cuid())
  email     String      @unique
  name      String?
  createdAt DateTime    @default(now())
  calls     ModelCall[]
}

model ModelCall {
  id            String         @id @default(cuid())
  createdAt     DateTime       @default(now())
  userId        String?
  user          User?          @relation(fields: [userId], references: [id])
  model         String
  prompt        String
  response      String
  latencyMs     Int
  promptTokens  Int
  respTokens    Int
  costUsd       Float          @default(0)
  status        CallStatus     @default(SUCCESS) // SUCCESS | FAIL | FLAGGED
  hallucinated  Boolean        @default(false)
  toxic         Boolean        @default(false)
  evals         EvalResult[]
}

model EvalResult {
  id        String      @id @default(cuid())
  createdAt DateTime    @default(now())
  callId    String
  call      ModelCall   @relation(fields: [callId], references: [id])
  kind      EvalKind
  passed    Boolean
  score     Float?
  details   String?
  @@index([callId, kind])
  @@unique([callId, kind])
}

model KnowledgeChunk {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  title     String
  content   String
  embedding Unsupported("vector")  // ðŸ‘ˆ tell Prisma it's a pgvector column
}


enum CallStatus {
  SUCCESS
  FAIL
  FLAGGED
}

enum EvalKind {
  HALLUCINATION   // (legacy simple check; keep if youâ€™re using it)
  TOXICITY
  INJECTION       // prompt injection heuristics
  PII             // PII/secret detection
  GROUNDING       // RAG-grounded factuality
}
